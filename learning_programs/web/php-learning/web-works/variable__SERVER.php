<!DOCTYPE html>
<html>
	<head>
		<title>_SERVER</title>
	</head>
<body>
<h1>$_SERVER[.]</h1>

<?php
//function 
?>

<p title="Содержит количество параметров, переданных скрипту (если запуск произведен в командной строке).">
'argc'=<?php if(array_key_exists('argc',$_SERVER)) var_dump($_SERVER['argc']); else echo 'UNDEFINED'?> 

<p title="Массив аргументов, переданных скрипту. Когда скрипт запущен в командой строке, это дает C-подобный доступ к параметрам командной строки. Когда вызывается через метод GET, этот массив будет содержать строку запроса.">
'argv'=<?php var_dump($_SERVER['argv'])?> 

<hr>

<p title="Директория корня документов, в которой выполняется текущий скрипт, в точности та, которая указана в конфигурационном файле сервера.">'DOCUMENT_ROOT'=<?php var_dump($_SERVER['DOCUMENT_ROOT'])?> 

<p title="Имя файла скрипта, который сейчас выполняется, относительно корня документов. Например,$_SERVER['PHP_SELF'] в скрипте по адресу http://example.com/foo/bar.php будет /foo/bar.php. Константа __FILE__ содержит полный путь и имя файла текущего (то есть подключенного) файла. Если PHP запущен в командной строке, эта переменная содержит имя скрипта, начиная с PHP 4.3.0. Раньше она была недоступна.">
'PHP_SELF'=<?php var_dump($_SERVER['PHP_SELF'])?> 

<p title="Абсолютный путь к скрипту, который в данный момент исполняется.
	Замечание: Если скрипт запускается в командной строке (CLI), используя относительный путь, такой как file.php или ../file.php, переменная $_SERVER['SCRIPT_FILENAME'] будет содержать относительный путь, указанный пользователем.">
'SCRIPT_FILENAME'=<?php var_dump($_SERVER['SCRIPT_FILENAME'])?> 

<p title="Содержит путь, к текущему исполняемому скрипту. Это полезно для страниц, которые должны указывать на самих себя. Константа __FILE__ содержит полный путь и имя текущего (т.е. включаемого) файла.">
'SCRIPT_NAME'=<?php var_dump($_SERVER['SCRIPT_NAME'])?> 

<p title="Filesystem- (not document root-) based path to the current script, after the server has done any virtual-to-real mapping.
	Замечание: Начиная с PHP 4.3.2, переменная PATH_TRANSLATED больше не устанавливается неявно в Apache 2 SAPI, по сравнению с Apache версии 1, где она устанавливается в то же самое значение, что и переменная SCRIPT_FILENAME, когда она не используется Apache. Это изменение было сделано для соответствия спецификации CGI, где переменная PATH_TRANSLATED должна существовать только тогда, когда PATH_INFO определена. Пользователи Apache 2 могут использовать директиву AcceptPathInfo = On в конфигурационном файле httpd.conf для задания переменной PATH_INFO.">
'PATH_TRANSLATED'=<?php var_dump($_SERVER['PATH_TRANSLATED'])?> 

<hr>

<p title="Содержит используемую сервером версию спецификации CGI; к примеру'CGI/1.1'.">
'GATEWAY_INTERFACE'=<?php var_dump($_SERVER['GATEWAY_INTERFACE'])?> 	

<p title="Строка идентификации сервера, указанная в заголовках, когда происходит ответ на запрос.">
'SERVER_SOFTWARE'=<?php var_dump($_SERVER['SERVER_SOFTWARE'])?> 

<p title="Строка, содержащая версию сервера и имя виртуального хоста, которые добавляются к генерируемым сервером страницам, если включено.">
'SERVER_SIGNATURE'=<?php var_dump($_SERVER['SERVER_SIGNATURE'])?> 

<p title="Эта переменная получает свое значение (для Apache) из директивы конфигурационного файла сервера. Если скрипт запущен на виртуальном хосте, это будет значение, определенное для данного виртуального хоста.">
'SERVER_ADMIN'=<?php var_dump($_SERVER['SERVER_ADMIN'])?> 

<p>.

<p title="IP адрес сервера, на котором выполняется текущий скрипт.">
'SERVER_ADDR'=<?php var_dump($_SERVER['SERVER_ADDR'])?> 

<p title="Имя хоста, на котором выполняется текущий скрипт. Если скрипт выполняется на виртуальном хосте, здесь будет содержатся имя, определенное для этого виртуального хоста.">
'SERVER_NAME'=<?php var_dump($_SERVER['SERVER_NAME'])?> 

<p title="Имя и версия информационного протокола, через который была запрошена страница; к примеру 'HTTP/1.0';">
'SERVER_PROTOCOL'=<?php var_dump($_SERVER['SERVER_PROTOCOL'])?> 

<p title="Порт на компьютере сервера, используемый веб-сервером для соединения. Для установок по умолчанию, значение будет '80'; используя SLL, например, это значение будет таким, какое сконфигурировано для соединений безопасного HTTP.
	Замечание: Чтобы получить физический (реальный) порт в Apache 2, необходимо установить UseCanonicalName = On и UseCanonicalPhysicalPort = On, иначе это значение может быть подменено и не вернуть реальной значение физического порта. Полагаться на это значение небезопасно в контексте приложений, требующих усиленной безопасности.">
'SERVER_PORT'=<?php var_dump($_SERVER['SERVER_PORT'])?> 

<hr>

<p title="URI, который был передан для того, чтобы получить доступ к этой странице. Например, '/index.html'.">
'REQUEST_URI'=<?php var_dump($_SERVER['REQUEST_URI'])?> 

<p title="Содержит любой предоставленный пользователем путь, содержащийся после имени скрипта, но до строки запроса, если доступно. Например, если текущий скрипт запрошен по URL http://www.example.com/php/path_info.php/some/stuff?foo=bar, то переменная $_SERVER['PATH_INFO'] будет содержать /some/stuff.">
'PATH_INFO'=<?php var_dump($_SERVER['PATH_INFO'])?> 

<p title="Исходное значение переменной 'PATH_INFO' до начала обработки PHP.">
'ORIG_PATH_INFO'=<?php var_dump($_SERVER['ORIG_PATH_INFO'])?> 

<p title="Строка запросов, если есть, с помощью которой была получена страница.">
'QUERY_STRING'=<?php var_dump($_SERVER['QUERY_STRING'])?> 

<p>

<p title="Принимает непустое значение, если запрос был произведен через протокол HTTPS.
	Замечание: Обратите внимание, что при использовании ISAPI с IIS значение будет off, если запрос не был произведен через протокол HTTPS.">
'HTTPS'=<?php var_dump($_SERVER['HTTPS'])?> 

<p title="Какой метод был использован для запроса страницы; к примеру 'GET', 'HEAD', 'POST', 'PUT'.
	Замечание: PHP скрипт завершается после посылки заголовков (то есть после того, как осуществляет любой вывод без буферизации вывода), если запрос был осуществлен методом HEAD.">
'REQUEST_METHOD'=<?php var_dump($_SERVER['REQUEST_METHOD'])?> 

<p title="Временная метка начала запроса. Доступна, начиная с PHP 5.1.0.">
'REQUEST_TIME'=<?php var_dump($_SERVER['REQUEST_TIME'])?> 

<p title="Временная метка начала запроса с точностью до микросекунд. Доступна, начиная с PHP 5.4.0.">
'REQUEST_TIME_FLOAT'=<?php var_dump($_SERVER['REQUEST_TIME_FLOAT'])?> 

<p>.

<p title="Содержимое заголовка Accept: из текущего запроса, если он есть.">
'HTTP_ACCEPT'=<?php var_dump($_SERVER['HTTP_ACCEPT'])?> 

<p title="Содержимое заголовка Accept-Charset: из текущего запроса, если он есть. Например: 'iso-8859-1,*,utf-8'.">
'HTTP_ACCEPT_CHARSET'=<?php var_dump($_SERVER['HTTP_ACCEPT_CHARSET'])?> 

<p title="Содержимое заголовка Accept-Encoding: из текущего запроса, если он есть. Например: 'gzip'.">
'HTTP_ACCEPT_ENCODING'=<?php var_dump($_SERVER['HTTP_ACCEPT_ENCODING'])?> 	

<p title="Содержимое заголовка Accept-Language: из текущего запроса, если он есть. Например: 'en'.">
'HTTP_ACCEPT_LANGUAGE'=<?php var_dump($_SERVER['HTTP_ACCEPT_LANGUAGE'])?> 	

<p title="Содержимое заголовка Connection: из текущего запроса, если он есть. Например: 'Keep-Alive'.">
'HTTP_CONNECTION'=<?php var_dump($_SERVER['HTTP_CONNECTION'])?> 

<p title="Содержимое заголовка Host: из текущего запроса, если он есть.">
'HTTP_HOST'=<?php var_dump($_SERVER['HTTP_HOST'])?> 		

<p>.

<p title="Адрес страницы (если есть), которая привела браузер пользователя на эту страницу. Этот заголовок устанавливается веб-браузером пользователя. Не все браузеры устанавливают его и некоторые в качестве дополнительной возможности позволяют изменять содержимое заголовка HTTP_REFERER. Одним словом, в самом деле ему нельзя доверять.">
'HTTP_REFERER'=<?php var_dump($_SERVER['HTTP_REFERER'])?> 		

<p title="Содержимое заголовка User-Agent: из текущего запроса, если он есть. Эта строка содержит обозначение браузера, которым пользователь запросил данную страницу. Типичным примером является строка: Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586). Среди прочего, вы можете использовать это значение с функцией get_browser() чтобы адаптировать вывод вашей страницы к возможностям браузера пользователя">
'HTTP_USER_AGENT'=<?php var_dump($_SERVER['HTTP_USER_AGENT'])?> 	

<p title="IP-адрес, с которого пользователь просматривает текущую страницу.">
'REMOTE_ADDR'=<?php var_dump($_SERVER['REMOTE_ADDR'])?> 		

<p title="Удаленный хост, с которого пользователь просматривает текущую страницу. Обратный просмотр DNS базируется на значении переменной REMOTE_ADDR.
Замечание: Ваш веб-сервер должен быть настроен, чтобы создавать эту переменную. Для примера, в Apache вам необходимо присутствие директивы HostnameLookups On в файле httpd.conf, чтобы эта переменная создавалась. См. также gethostbyaddr().">
'REMOTE_HOST'=<?php var_dump($_SERVER['REMOTE_HOST'])?> 		

<p title="Порт на удаленной машине, который используется для связи с веб-сервером.">
'REMOTE_PORT'=<?php var_dump($_SERVER['REMOTE_PORT'])?> 		

<hr>

<p title="Аутентифицированный пользователь.">
'REMOTE_USER'=<?php var_dump($_SERVER['REMOTE_USER'])?> 		

<p title="Аутентифицированный пользователь, если запрос был перенаправлен изнутри.">
'REDIRECT_REMOTE_USER'=<?php var_dump($_SERVER['REDIRECT_REMOTE_USER'])?> 	

<p>.

<p title="При выполнении HTTP Digest аутентификации, этой переменной присваивается заголовок 'Authorization', который присылается клиентом (его необходимо потом использовать для соответствующей валидации).">
'PHP_AUTH_DIGEST'=<?php var_dump($_SERVER['PHP_AUTH_DIGEST'])?> 	

<p title="Когда выполняется HTTP-аутентификация, этой переменной присваивается имя пользователя, предоставленное пользователем.">
'PHP_AUTH_USER'=<?php var_dump($_SERVER['PHP_AUTH_USER'])?> 		

<p title="Когда выполняется HTTP-аутентификация, этой переменной присваивается пароль, предоставленный пользователем.">
'PHP_AUTH_PW'=<?php var_dump($_SERVER['PHP_AUTH_PW'])?> 		

<p title="Когда выполняется HTTP-аутентификация, этой переменной присваивается тип аутентификации, который используется.">
'AUTH_TYPE'=<?php var_dump($_SERVER['AUTH_TYPE'])?> 		

</body>
</html>
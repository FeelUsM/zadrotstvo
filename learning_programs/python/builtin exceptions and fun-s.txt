builtin modules:
[__builtin__ === __builtins__
	'BaseException',
		'SystemExit',
		'KeyboardInterrupt', # C-c
		'GeneratorExit',
		'Exception', # базовый класс пользовательских исключений
			'StopIteration',
			'StopAsyncIteration',
			'ArithmeticError',
				'FloatingPointError',
				'OverflowError',
				'ZeroDivisionError',
			'BufferError',
			'LookupError',
				'IndexError',
				'KeyError',
			--- 
			'AssertionError',
			'EOFError',
			'ImportError',
				'ModuleNotFoundError',
			'NameError',
				'UnboundLocalError',
			'MemoryError',
			'AttributeError',
			'ReferenceError',
			'SyntaxError',
				'IndentationError',
					'TabError',
			'TypeError',
			'RuntimeError',
				'NotImplementedError',
				'RecursionError',
			'ValueError',
				'UnicodeError',
					'UnicodeDecodeError',
					'UnicodeEncodeError',
					'UnicodeTranslateError',
			'SystemError',
			---
			'EnvironmentError',
			'IOError',
			'WindowsError',
			'OSError',
				'BlockingIOError',
				'ChildProcessError',
				'ConnectionError',
					'BrokenPipeError',
					'ConnectionAbortedError',
					'ConnectionRefusedError',
					'ConnectionResetError',
				'FileExistsError',
				'FileNotFoundError',
				'InterruptedError',
				'IsADirectoryError',
				'NotADirectoryError',
				'PermissionError',
				'ProcessLookupError',
				'TimeoutError',
			---
			'Warning',
				'DeprecationWarning',
				'PendingDeprecationWarning',
				'RuntimeWarning',
				'SyntaxWarning',
				'UserWarning',
				'FutureWarning',
				'ImportWarning',
				'UnicodeWarning',
				'BytesWarning',
				'ResourceWarning',
	константы:
		'False',
		'True',
		'None',
		'NotImplemented',
		'Ellipsis',
	'__debug__', - True/False - влияет на assert

	'__IPYTHON__',
	'__build_class__',
	'__doc__',
	'__import__',	(name, globals=None, locals=None, fromlist=(), level=0)
	'__loader__',
	'__name__',
	'__package__',
	'__spec__',
	запуск и компиляция
		__import__(name, globals=None, locals=None, fromlist=(), level=0)
		globals	() -> dict
		locals	() -> dict
		eval	(expression[, globals[, locals]]); expression - строка
		exec	(object[, globals[, locals]]); object - string or a code object
		compile	(source, filename, mode, flags=0, dont_inherit=False, optimize=-1) -> code object
		breakpoint(*args, **kws) -> sys.breakpointhook() -> pdb.set_trace()
	помощь
		help	([object])
	файлы
		open	(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
		input	([prompt])
		print	(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
	простые типы данных
		bool	() -> constructor
		
		str		() -> constructor
		repr	(object)
		ascii	(object)
		format	(value[, format_spec])
		bin		(x)
		oct		(x)
		hex		(x)
		chr		(i)
		ord		(c)
		bytes	() -> constructor
		bytearray() -> constructor
		
		int		() -> constructor
		float	() -> constructor
		complex	() -> constructor
		round	(number[, ndigits])
		abs		(x)
		divmod	(a, b)
		pow		(x, y[, z])
	объекты
		id		(object) -> int
		hash	(object) -> int //.__hash__()
		memoryview(obj) -> constructor
		type	(object) -> constructor
		type	(name, bases, dict) -> constructor
		isinstance(object, classinfo) -> bool
		issubclass(class, classinfo) -> bool
		super	()
		callable(object) -> bool
		dir		([object]) -> список атрибутов //.__dir__()
		vars	([object]) -> dict //.__dict__() . без аргумента как locals()
		delattr	()
		setattr	()
		getattr	()
		hasattr	()
		staticmethod() //@staticmethod
		classmethod() //@classmethod
		property(fget=None, fset=None, fdel=None, doc=None) -> constructor //@property
		object	() -> constructor - просто базовый объект
	составные типы данных
		set		() -> constructor
		dict	() -> constructor
		frozenset() -> constructor
		tuple	() -> constructor
		list	() -> constructor
	индексы, слайсы, итераторы
		len		()
		range	()
		slice	()
		iter	()
		next	()
	функ.прог.
		all		(iterable) -> bool AND
		any		(iterable) -> bool OR
		sum		(iterable) -> num
		min		(iterable) -> num
		max		(iterable) -> num
		enumerate(iterable, start=0) 	[a,b,c] yield-> [(0,a),(1,b),(2,c)]
		zip		(*iterables) 			[1,2,3],[4,5,6,76] yield-> [(1, 4), (2, 5), (3, 6)]
		map		(f, it1, it2...) 		[a,b,c] [x,y,z] yield-> [f(a,x),f(b,y),f(c,z)]
		sorted	(iterable, *, key=None, reverse=False) -> [отсортированный]
		reversed(seq) -> reverse iterator //.__reversed__() .__len__() .__getitem__()
		filter	(function, iterable) 	yield->
	---
	'display',	???
	'get_ipython',	???
	'credits',	???
	'copyright',	???
	'license',	???
]

(sys.builtin_module_names:
	'builtins',
	'sys',
	'time',

	'cmath',
	'math',

	'array',
	'itertools',
	'mmap',

	'parser',

	'atexit',
	'faulthandler',
	'errno',

	'audioop',
	'binascii',
	'gc',
	'marshal',
	'xxsubtype',
	'zipimport',
	'zlib'

	'msvcrt',
	'nt',
	'winreg',

	'_ast',
	'_bisect',
	'_blake2',
	'_codecs',
	'_codecs_cn',
	'_codecs_hk',
	'_codecs_iso2022',
	'_codecs_jp',
	'_codecs_kr',
	'_codecs_tw',
	'_collections',
	'_csv',
	'_datetime',
	'_functools',
	'_heapq',
	'_imp',
	'_io',
	'_json',
	'_locale',
	'_lsprof',
	'_md5',
	'_multibytecodec',
	'_opcode',
	'_operator',
	'_pickle',
	'_random',
	'_sha1',
	'_sha256',
	'_sha3',
	'_sha512',
	'_signal',
	'_sre',
	'_stat',
	'_string',
	'_struct',
	'_symtable',
	'_thread',
	'_tracemalloc',
	'_warnings',
	'_weakref',
	'_winapi',
)

__name__ == '__main__' как модуль или как скрипт
__all__ = [ список имен(строк) функций для экспорта ]

str
	str(object='')
	str(object=b'', encoding='utf-8', errors='strict')
	
	.capitalize()
	.casefold() #  is similar to lowercasing but more aggressive
	.lower()
	
	.center(width[, fillchar])
	.format(*args, **kwargs) # ...
	.format_map(mapping) # like str.format(**mapping) but ...
	.expandtabs(tabsize=8)

	.encode(encoding="utf-8", errors="strict") -> bytes

	.count(sub[, start[, end]]) # non-overlapping occurrences of substring sub in the range [start, end]
	.endswith(suffix[, start[, end]])
	.find(sub[, start[, end]]) -> index
	.index(sub[, start[, end]]) # .find(sub[, start[, end]])
	
	.islower()
	.isupper()
	.isalnum()
	.isalpha()
	.isascii()
	.isdecimal()
	.isdigit()
	.isidentifier()
	.isnumeric()
	.isprintable()
	.isspace()
	.istitle()
	
	.join(iterable)
	.ljust(width[, fillchar])
	.lstrip([chars]) # удаляет символы, содержащиеся в chars
	str.maketrans(x[, y[, z]])\


[sys:
	'__displayhook__',
	'__doc__',
	'__excepthook__',
	'__interactivehook__',
	'__loader__',
	'__name__',
	'__package__',
	'__spec__',
	'__stderr__',
	'__stdin__',
	'__stdout__',

	'_clear_type_cache',
	'_current_frames',
	'_debugmallocstats',
	'_enablelegacywindowsfsencoding',
	'_getframe',
	'_git',
	'_home',
	'_xoptions',

	'builtin_module_names',
	'modules',	уже загруженные модули

	'byteorder',

	'call_tracing',
	'callstats',
	'displayhook',
	'excepthook',
	'dllhandle',
	'dont_write_bytecode',
	'flags',
	'float_repr_style',
	'exc_info',
	'float_info',
	'hash_info',
	'int_info',
	''thread_info',
	'intern',
	is_finalizing',
	'maxsize',
	'maxunicode',
	'meta_path',
	'path_hooks',
	'path_importer_cache',
	'warnoptions',

	'get_asyncgen_hooks',
	'get_coroutine_wrapper',
	'getallocatedblocks',
	'getcheckinterval',
	'setcheckinterval',
	'getdefaultencoding',
	'getfilesystemencodeerrors',
	'getfilesystemencoding',
	'getprofile',
	'setprofile',
	'getrecursionlimit',
	'setrecursionlimit',
	'getrefcount',
	'getsizeof',
	'getswitchinterval',
	'setswitchinterval',
	'gettrace',
	'settrace',
	'set_asyncgen_hooks',
	'set_coroutine_wrapper',

	'base_exec_prefix',
	'base_prefix',
	'exec_prefix',	platform dependent
	'prefix',	platform independent
	'executable',	путь к интерпретатору

	'ps1',	'>>> '	'In : '
	'ps2',	'... '	'... '
	'ps3',	''	'Out : '

	'argv',
	'path',
	'stderr',
	'stdin',
	'stdout',
	'exit',

	'platform',
	'implementation',
	'copyright',
	'version',
	'hexversion',
	'version_info',
	'getwindowsversion',
	'api_version',
	'abiflags',	POSIX only
	'winver'
]

[os:
	'W_OK',
	'X_OK',
	'F_OK',
	'R_OK',
	'O_BINARY',
	'O_TEXT',
	'O_APPEND',
	'O_CREAT',
	'O_RDONLY',
	'O_WRONLY',
	'O_RDWR',
	'O_EXCL',
	'O_NOINHERIT',
	'O_RANDOM',
	'O_SEQUENTIAL',
	'O_SHORT_LIVED',
	'O_TEMPORARY',
	'O_TRUNC',

	'SEEK_CUR',
	'SEEK_END',
	'SEEK_SET',
	'TMP_MAX',

	'__all__',
	'__builtins__',
	'__cached__',
	'__doc__',
	'__file__',
	'__loader__',
	'__name__',
	'__package__',
	'__spec__',

	'_Environ',
	'_execvpe',
	'_exists',
	'_exit',
	'_fspath',
	'_get_exports_list',
	'_putenv',
	'_unsetenv',
	'_wrap_close',

	'MutableMapping',
	'error',	=== OSError

	'errno',	module	с константами ошибок
	'path',		module

константы
	'cpu_count',	()
	'curdir',	'.'
	'pardir',	'..'

	'sep',		dir separator			'/','\\'
	'altsep		alternative dir separator	', None,'/'
	'extsep',	extension separator		'.'
	'linesep',	line separator			'\n','\r\n'

	'pathsep',	':'/';'
	'defpath',	path, если нет переменной среды PATH
	'devnull',	'/dev/null'/'nul'

	'name',		'posix', 'nt', 'java'
переменные среды
	'environ',	env - при запуске интерпретатора
	'getenv',	(key, default=None)	env - кодировка sys.getfilesystemencoding()
	'getenvb'	(key, default=None)	on Unix
	'putenv',	(key, default=None)	env

	'getcwd',	()	pwd - string
	'getcwdb',	()	pwd - bytes
	'chdir',	(path)	cd
запуск процессов	+module subprocess	+module signal
	'getpid',	()	pid текущего процесса
	'getppid',	()	parent’s process id
	execl		(path, arg0, arg1, ...)
	execle		(path, arg0, arg1, ..., env)
	execlp		(file, arg0, arg1, ...)
	execlpe		(file, arg0, arg1, ..., env)
	execv		(path, args)
	execve		(path, args, env)
	execvp		(file, args)
	execvpe		(file, args, env)
				запускает новый процесс, а сам уничтожается
	spawnl		(mode, path, ...)
	spawnle		(mode, path, ..., env)
	//spawnlp	(mode, file, ...)
	//spawnlpe	(mode, file, ..., env)
	spawnv		(mode, path, args)
	spawnve		(mode, path, args, env)
	//spawnvp	(mode, file, args)
	//spawnvpe	(mode, file, args, env)
		'P_NOWAIT',	не ждать, вернуть id подпроцесса
		'P_NOWAITO',	не ждать, вернуть id подпроцесса
		'P_WAIT',	ждать, пока выполнится подпроцесс, вернуть его код возврата
		'P_DETACH',	(Windows) P_NOWAIT + отделить процесс от консоли
		'P_OVERLAY',	(Windows) как exec
	'startfile',	(path[, operation])	открывает файл дефолтным приложением (Windows)
	'system',	(command)	запускает новый процесс и ждет его окончания
	'pipe',		()	(r,w)	- пара файловых дескрипторов, которые не inheritable - сразу закрываются в дочерних процессах
	'popen',	(cmd, mode='r', buffering=-1)	-> fd	запускает новый процесс, с которым можно общаться
	'kill',		(pid, sig)
	'abort',	()	кидает сигнал SIGABRT
папки	+ codecs.surrogateescape
	'PathLike',	abstract class
		__fspath__()	file system path representation
	'DirEntry',	class
		name	base filename, relative to the scandir() path argument
		path	full path name	- тип и абсолютность/относительность такая же как в scandir() path argument
		inode()	os.stat(entry.path, follow_symlinks=False).st_ino
		is_dir(*, follow_symlinks=True)	
		is_file(*, follow_symlinks=True)
		is_symlink()
		stat(*, follow_symlinks=True) ->stat_result
	'scandir',	(path='.')	итератор типа DirEntry, 
		пробегает в произвольном порядке, 
		'.','..' - не пробегает, 
		with os.scandir(path) as it:
	    		for entry in it:
	        		if not entry.name.startswith('.') and entry.is_file():
	            			print(entry.name)
	'listdir',	(path='.')	список файлов/папок без '.','..'

	'mkdir',	(path, mode=0o777, *, dir_fd=None)	+umask
	'makedirs',	(name, mode=0o777, exist_ok=False)	+umask +все пром. директории
	'rmdir',	(path, *, dir_fd=None)	удаляет пустую директорию
	'removedirs',	(name)	рекурсивно удаляет каталоги пока они пусты
папки-файлы
	'stat_result'	class
		st_mode		???
		st_ino		inode/file index
		st_dev		девайс, на котором расположен файл
		st_nlink	количество hardlink-ов
		st_uid	
		st_gid
		st_size		в байтах, для файла или симлинка (его длина)
		st_atime	access (может быть float)
		st_mtime	modification
		st_ctime	metadata chage/creation
		st_atime_ns
		st_mtime_ns
		st_ctime_ns
		<Unix(Linux)>
		st_blocks	колчество (?)512-байтных блоков, (?) может ыть меньше, если в файле есть дыры
		st_blksize	предпочтительный размер буфера для чтения/записи файла
		st_rdev		тип устройства
		st_flags	пользовательские флаги (?)
		st_gen		File generation number
		st_birthtime
		<Solaris attrs>
		...
		<Windows>
		st_file_attributes	...
	'stat',	(path, *, dir_fd=None, follow_symlinks=True) ->stat_result
	'fstat',(fd) ->stat_result
	'lstat',(path, *, dir_fd=None) ->stat_result, //follow_symlinks=False
	'umask',(mask)	устанавливает новую и возвращает старую
	'chmod',(path, mode, *, dir_fd=None, follow_symlinks=True)

	'readlink',	(path, *, dir_fd=None)				раскрывает симлинк
	'link',		(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)	создает hardlink
	'symlink',	(src, dst, target_is_directory=False, *, dir_fd=None)	создает symlink
	'remove',	(path, *, dir_fd=None)				удаляет файл (но не директорию)
	'unlink',	(path, *, dir_fd=None)				=== remove
	'rename',	(src, dst, *, src_dir_fd=None, dst_dir_fd=None)	mv
	'replace',	(src, dst, *, src_dir_fd=None, dst_dir_fd=None)	mv
	'renames',	(old, new)					mv +все пром. директории
файлы
	'fdopen',	(fd, *args, **kwargs)	как open, только заренее нужен fd
	'open',		
	'close',	

	'device_encoding', (fd)
	'read',		
	'write'		

	'lseek',	

	'access',

	'closerange',
	'dup',
	'dup2',

	'fsdecode',
	'fsencode',
	'fspath',

	'fsync',
	'ftruncate',
	'get_exec_path',

	'get_handle_inheritable',
	'set_handle_inheritable',
	'get_inheritable',
	'set_inheritable',

	'getlogin',
	'stat_float_times',
	'statvfs_result',
	'strerror',
	'supports_bytes_environ',
	'supports_dir_fd',
	'supports_effective_ids',
	'supports_fd',
	'supports_follow_symlinks',
	'times',
	'utime',
	'times_result',
	'truncate',
	'uname_result',
	'urandom',
	'waitpid',
	'walk',

	'isatty',
	'terminal_size',
	'get_terminal_size',

	'abc',	???
	'st',	???
	'sys',	???
]

[stat:
	'S_ISDIR',	(mode)	directory
	'S_ISCHR',	(mode)	character special device file
	'S_ISBLK',	(mode)	block special device file
	'S_ISREG',	(mode)	regular file
	'S_ISFIFO',	(mode)	FIFO (named pipe)
	'S_ISLNK',	(mode)	symbolic link
	'S_ISSOCK',	(mode)	socket
	'S_ISDOOR',	(mode)	door

	'S_ISPORT',	(mode)	event port
	'S_ISWHT',	(mode)	whiteout


	'S_IMODE',	(mode)	часть mode, которую можно передать в chmod()
	'S_IFMT',	(mode)	часть mode, которая описывает тип файла

	'filemode'	(mode)	строка формата ‘-rwxrwxrwx’

константы:
	'S_IFDIR',	___40000
	'S_IFCHR',	___20000
	'S_IFBLK',	___60000
	'S_IFREG',	__100000
	'S_IFIFO',	___10000
	'S_IFLNK',	__120000
	'S_IFSOCK',	__140000
	'S_IFDOOR',	_______0

	'S_IFPORT',	_______0
	'S_IFWHT',	_______0

индексы в 10-tuple returned by os.stat(), os.fstat() or os.lstat()
	'ST_MODE',	Inode protection mode
	'ST_INO',	Inode number
	'ST_DEV',	Device inode resides on.
	'ST_NLINK',	Number of links to the inode
	'ST_UID',	User id of the owner
	'ST_GID',	Group id of the owner
	'ST_SIZE',	Size in bytes of a plain file; amount of data waiting on some special files
	'ST_ATIME',	Time of last access
	'ST_MTIME',	Time of last modification
	'ST_CTIME',	Unix: is the time of the last metadata change, 
			Windows: is the creation time

константы, которые можно передавать в os.chmod():
	'S_ISGID',	____2000	Set-group-ID bit ...
	'S_ISUID',	____4000	Set UID bit
	'S_ISVTX',	____1000	Sticky bit

	'S_IRWXU',	_____700	Mask for file owner permissions	
	'S_IRUSR',	_____400
	'S_IWUSR',	_____200
	'S_IXUSR',	_____100

	'S_IRWXG',	______70	Mask for group permissions
	'S_IRGRP',	______40
	'S_IWGRP',	______20
	'S_IXGRP',	______10

	'S_IRWXO',	_______7	Mask for permissions for others (not in group).
	'S_IROTH',	_______4
	'S_IWOTH',	_______2
	'S_IXOTH',	_______1

	'S_ENFMT',	____2000	System V file locking enforcement ...
	'S_IREAD',	_____400	Unix V7 synonym
	'S_IWRITE',	_____200	Unix V7 synonym
	'S_IEXEC',	_____100	Unix V7 synonym

константы, которые можно передавать в os.chflags(): (Mac or BSD)
	'UF_NODUMP',	Do not dump the file
	'UF_IMMUTABLE',	The file may not be changed
	'UF_APPEND',	The file may only be appended to
	'UF_OPAQUE',	The directory is opaque (непрозрачный) when viewed through a union stack
	'UF_NOUNLINK',	The file may not be renamed or deleted
	'UF_COMPRESSED',The file is stored compressed (Mac OS X 10.6+)
	'UF_HIDDEN',	The file should not be displayed in a GUI (Mac OS X 10.5+)

	'SF_ARCHIVED',	The file may be archived
	'SF_IMMUTABLE',	The file may not be changed
	'SF_APPEND',	The file may only be appended to
	'SF_NOUNLINK',	The file may not be renamed or deleted
	'SF_SNAPSHOT',	The file is a snapshot file

	UF_NODUMP	_______1
	UF_IMMUTABLE	_______2
	UF_APPEND	_______4
	UF_OPAQUE	______10
	UF_NOUNLINK	______20
	UF_COMPRESSED	______40
	UF_HIDDEN	__100000
	SF_ARCHIVED	__200000
	SF_IMMUTABLE	__400000
	SF_APPEND	_1000000
	SF_NOUNLINK	_4000000
	SF_SNAPSHOT	10000000

os.stat().st_file_attributes (Windows)
	FILE_ATTRIBUTE_READONLY		_______1
	FILE_ATTRIBUTE_HIDDEN		_______2
	FILE_ATTRIBUTE_SYSTEM		_______4
	FILE_ATTRIBUTE_DIRECTORY	______20
	FILE_ATTRIBUTE_ARCHIVE		______40
	FILE_ATTRIBUTE_DEVICE		_____100
	FILE_ATTRIBUTE_NORMAL		_____200
	FILE_ATTRIBUTE_TEMPORARY	_____400
	FILE_ATTRIBUTE_SPARSE_FILE	____1000
	FILE_ATTRIBUTE_REPARSE_POINT	____2000
	FILE_ATTRIBUTE_COMPRESSED	____4000
	FILE_ATTRIBUTE_OFFLINE		___10000
	FILE_ATTRIBUTE_NOT_CONTENT_INDEXED 20000
	FILE_ATTRIBUTE_ENCRYPTED	___40000
	FILE_ATTRIBUTE_INTEGRITY_STREAM	__100000
	FILE_ATTRIBUTE_VIRTUAL		__200000
	FILE_ATTRIBUTE_NO_SCRUB_DATA	__400000

???
	IO_REPARSE_TAG_SYMLINK¶
	IO_REPARSE_TAG_MOUNT_POINT
	IO_REPARSE_TAG_APPEXECLINK

	'_filemode_table',

]

[datetime: # типы данных, связанные со временем, текущее время, sleep() и т.п. - в модуле time
	'__builtins__',
	'__cached__',
	'__doc__',
	'__file__',
	'__loader__',
	'__name__',
	'__package__',
	'__spec__',
	# aware iff d.tzinfo!=None and d.tzinfo.utcoffset(d)!=None
	'MAXYEAR',	1
	'MINYEAR',	9999
	# all immutable, hashable
		.min
		.max
		.resolution
	'date', class: # only naive
		date(year, month, day)
		date.today() === date.fromtimestamp(time.time())
		date.fromtimestamp(timestamp) # timestamp - число секунд с 1го января 1970 (до 2038)
		date.fromordinal(ordinal)  # ordinal - число дней с 1го января 1го года
		date.fromisoformat(date_string) # YYYY-MM-DD
		year
		month
		day
		+ - <
		.replace(year=self.year, month=self.month, day=self.day)
		.timetuple() -> time.struct_time
		.toordinal() -> int
		.weekday() -> int # 0 - monday
		.isoweekday() -> int # 1 - monday
		.isocalendar() -> (y,week_No,week_day)
		.isoformat() -> str # YYYY-MM-DD
		.ctime() -> str # 'Wed Dec  4 00:00:00 2002'
		.strftime(format)
	'time', class:
		time(hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)
		hour
		minute
		second
		microsecond
		tzinfo
		fold # при смене с летнего на зимнее 0-ранний участок времени 1- поздний
		time.fromisoformat(time_string) # HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]
		.replace(hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0)
		.isoformat(timespec='auto')
			'auto': Same as 'seconds' if microsecond is 0, same as 'microseconds' otherwise.
			'hours': Include the hour in the two-digit HH format.
			'minutes': Include hour and minute in HH:MM format.
			'seconds': Include hour, minute, and second in HH:MM:SS format.
			'milliseconds': Include full time, but truncate fractional second part to milliseconds. HH:MM:SS.sss format.
			'microseconds': Include full time in HH:MM:SS.ffffff format.
		.strftime(format)

		.utcoffset()		# If tzinfo is None, returns None, else returns self.tzinfo.utcoffset(None), 
		.dst()				# If tzinfo is None, returns None, else returns self.tzinfo.dst(None)
		.tzname()			# If tzinfo is None, returns None, else returns self.tzinfo.tzname(None),
	'datetime', class:
		datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tzinfo=None, *, fold=0)
		datetime.today()	# current local time with tz=None
		datetime.now(tz=None)# current tz time
		datetime.utcnow()	# current UTC time with tz=None
		datetime.fromtimestamp(timestamp, tz=None)
		datetime.utcfromtimestamp(timestamp)
		datetime.fromordinal(ordinal)
		datetime.combine(date, time, tzinfo=self.tzinfo)
		datetime.fromisoformat(date_string) # YYYY-MM-DD[*HH[:MM[:SS[.fff[fff]]]][+HH:MM[:SS[.ffffff]]]]
		datetime.fromisocalendar(year, week, day)
		datetime.strptime(date_string, format) # parse string
		year
		month
		day
		hour
		minute
		second
		microsecond
		tzinfo
		fold # при смене с летнего на зимнее 0-ранний участок времени 1- поздний
		+ - <
		.date()
		.time() # tzinfo set to None
		.timetz()
		.replace(year=self.year, month=self.month, day=self.day, hour=self.hour, minute=self.minute, second=self.second, microsecond=self.microsecond, tzinfo=self.tzinfo, * fold=0)
		.astimezone(tz=None)
		
		.utcoffset()
		.dst()
		.tzname()
		
		.timetuple()
		.utctimetuple()
		.toordinal()
		.timestamp()
		.weekday()
		.isoweekday()
		.isocalendar()
		.isoformat(sep='T', timespec='auto')
		.ctime()
		.strftime(format)
	'timedelta', #to microsecond resolution.
		timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)
		.days
		.seconds
		.microseconds
		+ - * / // % abs()
	'tzinfo'	# abstract base class
		.utcoffset(dt) -> timedelta # offset of local time from UTC
		.dst(dt) -> timedelta # daylight saving time adjustment
		.tzname(dt) -> str # For example, “GMT”, “UTC”, “-500”, “-5:00”, “EDT”, “US/Eastern”, “America/New York”
		.fromutc(dt) -> datetime #???
	'timezone' from tzinfo, # fixed offset from the UTC
		timezone(offset/*timedelta*/, name=None)
		.utcoffset(dt) # dt<-None
		.tzname(dt) # dt<-None
		.dst(dt) # ==0 dt<-None
		.fromutc(dt) #???
		.utc -> timezone для UTC
	strftime/strptime
		%a	Weekday as locale’s abbreviated name.
		%A	Weekday as locale’s full name.
		%w	Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.
		%u	ISO 8601 weekday as a decimal number where 1 is Monday.

		%d	Day of the month as a zero-padded decimal number.

		%b	Month as locale’s abbreviated name.
		%B	Month as locale’s full name.
		%m	Month as a zero-padded decimal number.

		%y	Year without century as a zero-padded decimal number.
		%Y	Year with century as a decimal number.
		%G	ISO 8601 year with century representing the year that contains the greater part of the ISO week (%V).

		%H	Hour (24-hour clock) as a zero-padded decimal number.
		%I	Hour (12-hour clock) as a zero-padded decimal number.
		%p	Locale’s equivalent of either AM or PM.

		%M	Minute as a zero-padded decimal number.

		%S	Second as a zero-padded decimal number.

		%f	Microsecond as a decimal number, zero-padded on the left.

		%z	UTC offset in the form ±HHMM[SS[.ffffff]] (empty string if the object is naive).
		%Z	Time zone name (empty string if the object is naive).

		%j	Day of the year as a zero-padded decimal number.

		%U	Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.
		%W	Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.
		%V	ISO 8601 week as a decimal number with Monday as the first day of the week. Week 01 is the week containing Jan 4.

		%c	Locale’s appropriate date and time representation.
		%x	Locale’s appropriate date representation.
		%X	Locale’s appropriate time representation.
		%%	A literal '%' character.
	'datetime_CAPI', <class 'PyCapsule'>
	'sys', <class 'module'>
]

shutil
tempfile
subprocess
signal



--- встроенные модули ---
встроенное
	Введение
		Примечания о доступности
	Built-in Functions
	Built-in Constants
		Константы, добавлячемые модулем site
	Built-in Types
		Truth Value Testing
		Boolean Operations 	— and, or, not
		Comparisons
		Numeric Types 		— int, float, complex
		Iterator Types
		Sequence Types 		— list, tuple, range
		Text Sequence Type 	— str
		Binary Sequence Types — bytes, bytearray, memoryview
		Set Types 			— set, frozenset
		Mapping Types 		— dict
		Context Manager Types
		Other Built-in Types
		Special Attributes
	Built-in Exceptions
		Base classes
		Concrete exceptions
		Warnings
		Exception hierarchy
внутренности интерпретатора
	Python Runtime Services
		sys — System-specific parameters and functions
		sysconfig — Provide access to Python’s configuration information
		builtins — Built-in objects
		__main__ — Top-level script environment
		warnings — Warning control
		dataclasses — Data Classes
		contextlib — Utilities for with-statement contexts
		abc — Abstract Base Classes
		atexit — Exit handlers
		traceback — Print or retrieve a stack traceback
		__future__ — Future statement definitions
		gc — Garbage Collector interface
		inspect — Inspect live objects
		site — Site-specific configuration hook
	Custom Python Interpreters
		code — Interpreter base classes
		codeop — Compile Python code
	Importing Modules
		zipimport — Import modules from Zip archives
		pkgutil — Package extension utility
		modulefinder — Find modules used by a script
		runpy — Locating and executing Python modules
		importlib — The implementation of import
		Using importlib.metadata
	Python Language Services
		parser — Access Python parse trees
		ast — Abstract Syntax Trees
		symtable — Access to the compiler’s symbol tables
		symbol — Constants used with Python parse trees
		token — Constants used with Python parse trees
		keyword — Testing for Python keywords
		tokenize — Tokenizer for Python source
		tabnanny — Detection of ambiguous indentation
		pyclbr — Python class browser support
		py_compile — Compile Python source files
		compileall — Byte-compile Python libraries
		dis — Disassembler for Python bytecode
		pickletools — Tools for pickle developers
	Miscellaneous Services
		formatter — Generic output formatting
обработка разных типов данных
	Text Processing Services
		string — Common string operations
		re — Regular expression operations
		difflib — Helpers for computing deltas
		textwrap — Text wrapping and filling
		unicodedata — Unicode Database
		stringprep — Internet String Preparation
		cmd — Support for line-oriented command interpreters
		readline — GNU readline interface
		rlcompleter — Completion function for GNU readline
		shlex — Simple lexical analysis
	Binary Data Services
		struct — Interpret bytes as packed binary data
		codecs — Codec registry and base classes
	Data Types
		datetime — Basic date and time types
		calendar — General calendar-related functions
		collections — Container datatypes
		collections.abc — Abstract Base Classes for Containers
		heapq — Heap queue algorithm
		bisect — Array bisection algorithm
		array — Efficient arrays of numeric values
		weakref — Weak references
		types — Dynamic type creation and names for built-in types
		copy — Shallow and deep copy operations
		pprint — Data pretty printer
		reprlib — Alternate repr() implementation
		enum — Support for enumerations
	Numeric and Mathematical Modules
		numbers — Numeric abstract base classes
		math — Mathematical functions
		cmath — Mathematical functions for complex numbers
		decimal — Decimal fixed point and floating point arithmetic
		fractions — Rational numbers
		random — Generate pseudo-random numbers
		statistics — Mathematical statistics functions
	Functional Programming Modules
		itertools — Functions creating iterators for efficient looping
		functools — Higher-order functions and operations on callable objects
		operator — Standard operators as functions
	Data Persistence
		pickle — Python object serialization
		copyreg — Register pickle support functions
		shelve — Python object persistence
		marshal — Internal Python object serialization
		dbm — Interfaces to Unix “databases”
		sqlite3 — DB-API 2.0 interface for SQLite databases
	File Formats
		csv — CSV File Reading and Writing
		configparser — Configuration file parser
		netrc — netrc file processing
		xdrlib — Encode and decode XDR data
		plistlib — Generate and parse Mac OS X .plist files
сжатие и криптография
	Data Compression and Archiving
		zlib — Compression compatible with gzip
		gzip — Support for gzip files
		bz2 — Support for bzip2 compression
		lzma — Compression using the LZMA algorithm
		zipfile — Work with ZIP archives
		tarfile — Read and write tar archive files
	Cryptographic Services
		hashlib — Secure hashes and message digests
		hmac — Keyed-Hashing for Message Authentication
		secrets — Generate secure random numbers for managing secrets
общие сервисы ОС
	Generic Operating System Services
			os — Miscellaneous operating system interfaces
			io — Core tools for working with streams
			time — Time access and conversions
			argparse — Parser for command-line options, arguments and sub-commands
			getopt — C-style parser for command line options
			logging — Logging facility for Python
			logging.config — Logging configuration
			logging.handlers — Logging handlers
			getpass — Portable password input
			curses — Terminal handling for character-cell displays
			curses.textpad — Text input widget for curses programs
			curses.ascii — Utilities for ASCII characters
			curses.panel — A panel stack extension for curses
			platform — Access to underlying platform’s identifying data
			errno — Standard errno system symbols
			ctypes — A foreign function library for Python
	File and Directory Access
		pathlib — Object-oriented filesystem paths
		os.path — Common pathname manipulations
		fileinput — Iterate over lines from multiple input streams
		stat — Interpreting stat() results
		filecmp — File and Directory Comparisons
		tempfile — Generate temporary files and directories
		glob — Unix style pathname pattern expansion
		fnmatch — Unix filename pattern matching
		linecache — Random access to text lines
		shutil — High-level file operations
многопоточность
	Concurrent Execution
		threading — Thread-based parallelism
		multiprocessing — Process-based parallelism
		multiprocessing.shared_memory — Provides shared memory for direct access across processes
		The concurrent package
		concurrent.futures — Launching parallel tasks
		subprocess — Subprocess management
		sched — Event scheduler
		queue — A synchronized queue class
		_thread — Low-level threading API
		_dummy_thread — Drop-in replacement for the _thread module
		dummy_threading — Drop-in replacement for the threading module
	contextvars — Context Variables
		Context Variables
		Manual Context Management
		asyncio support
сети
	Networking and Interprocess Communication
		asyncio — Asynchronous I/O
		socket — Low-level networking interface
		ssl — TLS/SSL wrapper for socket objects
		select — Waiting for I/O completion
		selectors — High-level I/O multiplexing
		asyncore — Asynchronous socket handler
		asynchat — Asynchronous socket command/response handler
		signal — Set handlers for asynchronous events
		mmap — Memory-mapped file support
	Internet Data Handling
		email — An email and MIME handling package
		json — JSON encoder and decoder
		mailcap — Mailcap file handling
		mailbox — Manipulate mailboxes in various formats
		mimetypes — Map filenames to MIME types
		base64 — Base16, Base32, Base64, Base85 Data Encodings
		binhex — Encode and decode binhex4 files
		binascii — Convert between binary and ASCII
		quopri — Encode and decode MIME quoted-printable data
		uu — Encode and decode uuencode files
	Structured Markup Processing Tools
		html — HyperText Markup Language support
		html.parser — Simple HTML and XHTML parser
		html.entities — Definitions of HTML general entities
		XML Processing Modules
		xml.etree.ElementTree — The ElementTree XML API
		xml.dom — The Document Object Model API
		xml.dom.minidom — Minimal DOM implementation
		xml.dom.pulldom — Support for building partial DOM trees
		xml.sax — Support for SAX2 parsers
		xml.sax.handler — Base classes for SAX handlers
		xml.sax.saxutils — SAX Utilities
		xml.sax.xmlreader — Interface for XML parsers
		xml.parsers.expat — Fast XML parsing using Expat
	Internet Protocols and Support
		webbrowser — Convenient Web-browser controller
		cgi — Common Gateway Interface support
		cgitb — Traceback manager for CGI scripts
		wsgiref — WSGI Utilities and Reference Implementation
		urllib — URL handling modules
		urllib.request — Extensible library for opening URLs
		urllib.response — Response classes used by urllib
		urllib.parse — Parse URLs into components
		urllib.error — Exception classes raised by urllib.request
		urllib.robotparser — Parser for robots.txt
		http — HTTP modules
		http.client — HTTP protocol client
		ftplib — FTP protocol client
		poplib — POP3 protocol client
		imaplib — IMAP4 protocol client
		nntplib — NNTP protocol client
		smtplib — SMTP protocol client
		smtpd — SMTP Server
		telnetlib — Telnet client
		uuid — UUID objects according to RFC 4122
		socketserver — A framework for network servers
		http.server — HTTP servers
		http.cookies — HTTP state management
		http.cookiejar — Cookie handling for HTTP clients
		xmlrpc — XMLRPC server and client modules
		xmlrpc.client — XML-RPC client access
		xmlrpc.server — Basic XML-RPC servers
		ipaddress — IPv4/IPv6 manipulation library
мультимедиа и GUI
	Multimedia Services
		audioop — Manipulate raw audio data
		aifc — Read and write AIFF and AIFC files
		sunau — Read and write Sun AU files
		wave — Read and write WAV files
		chunk — Read IFF chunked data
		colorsys — Conversions between color systems
		imghdr — Determine the type of an image
		sndhdr — Determine type of sound file
		ossaudiodev — Access to OSS-compatible audio devices
	Graphical User Interfaces with Tk
		turtle — Turtle graphics
		tkinter — Python interface to Tcl/Tk
		tkinter.ttk — Tk themed widgets
		tkinter.tix — Extension widgets for Tk
		tkinter.scrolledtext — Scrolled Text Widget
		IDLE
		Other Graphical User Interface Packages
средства разработки
	Development Tools
		typing — Support for type hints
		pydoc — Documentation generator and online help system
		doctest — Test interactive Python examples
		unittest — Unit testing framework
		unittest.mock — mock object library
		unittest.mock — getting started
		2to3 - Automated Python 2 to 3 code translation
		test — Regression tests package for Python
		test.support — Utilities for the Python test suite
		test.support.script_helper — Utilities for the Python execution tests
	Debugging and Profiling
		Audit events table
		bdb — Debugger framework
		faulthandler — Dump the Python traceback
		pdb — The Python Debugger
		The Python Profilers
		timeit — Measure execution time of small code snippets
		trace — Trace or track Python statement execution
		tracemalloc — Trace memory allocations
	Software Packaging and Distribution
		distutils — Building and installing Python modules
		ensurepip — Bootstrapping the pip installer
		venv — Creation of virtual environments
		zipapp — Manage executable Python zip archives
	Internationalization
		gettext — Multilingual internationalization services
		locale — Internationalization services
платформо-специфичные модули
	MS Windows Specific Services
		msilib — Read and write Microsoft Installer files
		msvcrt — Useful routines from the MS VC++ runtime
		winreg — Windows registry access
		winsound — Sound-playing interface for Windows
	Unix Specific Services
		posix — The most common POSIX system calls
		pwd — The password database
		spwd — The shadow password database
		grp — The group database
		crypt — Function to check Unix passwords
		termios — POSIX style tty control
		tty — Terminal control functions
		pty — Pseudo-terminal utilities
		fcntl — The fcntl and ioctl system calls
		pipes — Interface to shell pipelines
		resource — Resource usage information
		nis — Interface to Sun’s NIS (Yellow Pages)
		syslog — Unix syslog library routines
прочая хрень
	Superseded Modules
		optparse — Parser for command line options
		imp — Access the import internals
	Undocumented Modules
		Platform specific modules

		
		
		
		
		
		
		
		
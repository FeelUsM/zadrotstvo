assert	OK
ctype	OK
errno	OK
fenv	OK11
float	OK
inttypes OK
iso646	OK
limits	OK
locale	
math	OK11
setjmp	OK
signal	
stdarg	OK
stdbool	OK
stddef	
stdint	OK
stdio	
stdlib	
string	
tgmath	OK
time	
uchar	
wchar	
wctype	
---
complex	OK11

--- поддержка языка ---
<setjmp.h>	
setjmp						(jmp_buf env)->int
longjmp						(jmp_buf env, int val)
<iso646.h>	
макросы and or not для && || !
<stdbool.h>	
bool true false
<stdarg.h>	
f(int x, ...)
va_start					(va_list ap, paramN)
va_arg						(va_list ap, type)->type
va_end						(va_list ap)

--- целые типы ---
<stdint.h>			<stdint.h>
intmax_t	uintmax_t	INTMAX_MIN	INTMAX_MAX	UINTMAX_MAX
int8_t		uint8_t		INT8_MIN	INT8_MAX	UINT8_MAX
int16_t		uint16_t	.		.		.
int32_t		uint32_t	.		.		.
int64_t		uint64_t	.		.		.
int_least8_t	uint_least8_t	INT_LEAST8_MIN	INT_LEAST8_MAX	UINT_LEAST8_MAX
int_least16_t	uint_least16_t	.		.		.
int_least32_t	uint_least32_t	.		.		.
int_least64_t	uint_least64_t	.		.		.
int_fast8_t	uint_fast8_t	INT_FAST8_MIN	INT_FAST8_MAX	UINT_FAST8_MAX
int_fast16_t	uint_fast16_t	.		.		.
int_fast32_t	uint_fast32_t	.		.		.
int_fast64_t	uint_fast64_t	.		.		.
intptr_t	uintptr_t	INTPTR_MIN	INTPTR_MAX	UINTPTR_MAX

<stddef.h>			<stdint.h>
size_t				SIZE_MAX
ptrdiff_t			PTRDIFF_MIN	PTRDIFF_MAX
<signal.h>			<stdint.h>
sig_atomic_t			SIG_ATOMIC_MIN	SIG_ATOMIC_MAX	// is not thread-safe, only async-signal safe.
<wchar.h>			<stdint.h>
wchar_t				WCHAR_MIN	WCHAR_MAX
wint_t				WINT_MIN	WINT_MAX
<limits.h>
char				CHAR_MIN	CHAR_MAX	UCHAR_MAX
				SCHAR_MIN	SCHAR_MAX
short				SHRT_MIN	SHRT_MAX	USHRT_MAX
int				INT_MIN		INT_MAX		UINT_MAX
long				LONG_MIN	LONG_MAX	ULONG_MAX
long long			LLONG_MIN	LLONG_MAX	ULLONG_MAX

CHAR_BIT					8
<stdint.h>
INT_MAX_C					(int-like)->intmax_t
UINT_MAX_C					(int-like)->uintmax_t
INT8_C						(int-like)->int8_t
UINT8_C						(int-like)->uint8_t
..16
..32
..64
--- целые числа ---
<stddef.h>
offsetof 					(type,member)->size_t
NULL						(void*)0
--- плавающие числа ---
<float.h>
FLT_RADIX	
FLT_MANT_DIG	DBL_MANT_DIG	LDBL_MANT_DIG
FLT_DIG		DBL_DIG		LDBL_DIG
FLT_MIN_EXP	DBL_MIN_EXP	LDBL_MIN_EXP
FLT_MIN_10_EXP	DBL_MIN_10_EXP	LDBL_MIN_10_EXP
FLT_MAX_EXP	DBL_MAX_EXP	LDBL_MAX_EXP
FLT_MAX_10_EXP	DBL_MAX_10_EXP	LDBL_MAX_10_EXP
FLT_MAX		DBL_MAX		LDBL_MAX
FLT_EPSILON	DBL_EPSILON	LDBL_EPSILON
FLT_MIN		DBL_MIN		LDBL_MIN
FLT_ROUNDS
FLT_EVAL_METHOD
DECIMAL_DIG
<fenv.h> // Floating-point environment
.....................................................
--- тригонометрия, экспоненты ---
<math.h>	<complex>	
		complex
cos	cosh	cos	cosh
sin	sinh	sin	sinh
tan	tanh	tan	tanh
acos	acosh	acos	acosh
asin	asinh	asin	asinh
atan	atanh	atan	atanh
atan2		atan2	
exp		exp
frexp
ldexp
log		log
log10		log10
pow		pow
sqrt
NAN
HUGE_VAL
		real	imag
		abs	arg
		norm
		conj
		polar
--- преобразование плавающие-целые ---
<math.h><stdlib>
ceil
floor
modf
fmod
abs
fabs	abs	div
fabsl	labs	ldiv
fabsf	llabs	lldiv
	<inttypes.h>
	imaxabs	imaxdiv
<tgmath.h> -> <math.h>+<complex.h>
--- преобразование строки-числа ---
<stdlib.h>		<wchar.h>		
atof	atoi		
	atol		
	atoll		
strdof	strtol		wcstof	wcstol	
strtod	strtoll		wcstod	wcstoll	
strtold	strtoul		wcstold	wcstoul	
	strtoull		wcstoull
<inttypes.h>
strtoimax		wcstoimax
strtoumax		wcstoumax
--- преобразование строки-время ---
<time.h>			<wchar.h>
strftime			wcsftime

--- система ---
<assert.h>
assert						(int expression)->void
<errno.h>	<stdio.h>	<string.h>
errno						int
		perror				( const char * str )->void
				strerror	( int errnum )->char * 
EDOM		// Domain error - область определения математических функций
ERANGE		// Range error - математические функции/функции чтения строки возвращают слижком большое значение
EILSEQ		// Illegal sequence - Многобайтовая последовательность 
<signal.h>
signal
raise
<time.h>
clock_t
time_t
struct tm
	tm_sec	int	seconds after the minute	0-60*
	tm_min	int	minutes after the hour	0-59
	tm_hour	int	hours since midnight	0-23
	tm_mday	int	day of the month	1-31
	tm_mon	int	months since January	0-11
	tm_year	int	years since 1900	
	tm_wday	int	days since Sunday	0-6
	tm_yday	int	days since January 1	0-365
	tm_isdst	int	Daylight Saving Time flag	Флаг перехода на летнее время	
<stdlib.h>
malloc	calloc
free	realloc
abort
atexit
exit
getenv
system
rand
srand
<stdio.h>
remove
rename
tmpfile
tmpnam
--- файлы ---
<stdio.h>
FILE
fpos_t
fclose

--- локаль ---
<locale.h>	
	LC_ALL		
	LC_COLLATE	// strcoll and strxfrm.
	LC_CTYPE	// <ctype>
	LC_MONETARY	// localeconv
	LC_NUMERIC	// localeconv и ввод-вывод плавающих чисел
	LC_TIME		// strftime
setlocale			(int category, const char* locale)->char*
localeconv			()->struct lconv*
struct lconv
	decimal_point		char*	"."	
	thousands_sep		char*	""	
	grouping		char*	""	1000000 -> "\3" : 1,000,000;     "\1\2\3" : 1,000,00,0;    "\3\1" : 1,0,0,0,000
						CHAR_MAX indicates that no further grouping is to be performed.
	int_curr_symbol		char*	""	ISO-4217 entry code for the currency, like "USD" for U.S.-Dollar or "GBP" for Pound Sterling
	currency_symbol		char*	""	Local currency symbol, like "$".
	mon_decimal_point	char*	""	
	mon_thousands_sep	char*	""	
	mon_grouping		char*	""	
	positive_sign		char*	""	Sign to be used for nonnegative (positive or zero) monetary quantities.
	negative_sign		char*	""	Sign to be used for negative monetary quantities.

	frac_digits		char	CHAR_MAX	Amount of fractional digits to the right of the decimal point for monetary quantities in the local format.
	p_cs_precedes		char	CHAR_MAX	positive: If this value is 1, the currency symbol should precede; if it is 0, it should follow.
	n_cs_precedes		char	CHAR_MAX	negative:
	p_sep_by_space		char	CHAR_MAX	positive: If this value is 1, a space should appear between currency symbol and value; if it is 0 it should not.
	n_sep_by_space		char	CHAR_MAX	negative: 
	p_sign_posn		char	CHAR_MAX	Position of the sign for nonnegative (positive or zero) monetary quantities:
						0 : Currency symbol and quantity surrounded by parentheses.
						1 : Sign before the quantity and currency symbol.
						2 : Sign after the quantity and currency symbol.
						3 : Sign right before currency symbol.
						4 : Sign right after currency symbol.
						CHAR_MAX : Unspecified.
	n_sign_posn		char	CHAR_MAX	Position of the sign for negative monetary quantities. See p_sign_posn above.
	int_frac_digits		char	CHAR_MAX	Same as frac_digits, but for the international format (instead of the local format).
	int_p_cs_precedes	char	CHAR_MAX	Same as p_cs_precedes, but for the international format.
	int_n_cs_precedes	char	CHAR_MAX	Same as n_cs_precedes, but for the international format.
	int_p_sep_by_space	char	CHAR_MAX	Same as p_sep_by_space, but for the international format.
	int_n_sep_by_space	char	CHAR_MAX	Same as n_sep_by_space, but for the international format.
	int_p_sign_posn		char	CHAR_MAX	Same as p_sign_posn, but for the international format.
	int_n_sign_posn		char	CHAR_MAX	Same as n_sign_posn, but for the international format.

<time.h>
strftime	wcsftime	(char* ptr, size_t maxsize, const char* format, const struct tm* timeptr )->size_t
<ctype.h>	<wctype.h>	wctype_t-name
T:int		wint_t
isalnum		iswalnum	"alnum"		( T c )->int
isalpha		iswalpha	"alpha"	
isblank		iswblank	"blank"	
iscntrl		iswcntrl	"cntrl"	
isdigit		iswdigit	"digit"	
isgraph		iswgraph	"graph"	
islower		iswlower	"lower"	
isprint		iswprint	"print"	
ispunct		iswpunct	"punct"	
isspace		iswspace	"space"	
isupper		iswupper	"upper"	
isxdigit	iswxdigit       "xdigit"
				wctrans_t-name
tolower		towlower	"tolower"	( T c )->T
toupper		towupper	"toupper"
<wctype.h>
wctype				(const char* property)->wctype_t 
iswctype			(wint_t c, wctype_t desc)->int
wctrans				(const char* property)->wctrans_t 
towctrans			(wint_t c, wctrans_t desc)->wint_t 
<wchar.h>
btowc		(int c)->wint_t					
wctob		(wint_t wc)->int				
--- мультибайтовые символы ---
<limits.h>
MB_LEN_MAX	// максимальный размер многобайтового символа для любой локали
<stdlib.h>
MB_CUR_MAX	// максимальный размер многобайтового символа для текущей локали
<wchar.h>
wint_t	wchar_t	
mbstate_t
mbsinit		(const mbstate_t* ps)->int			// проверяет, начальное ли состояние в *ps
<stdlib.h>	<uchar.h>			<wchar.h>
MB:char		char		char		char
WC:wchar_t	char16_t	char32_t 	wchar_t
		,mbstate_t * ps)->size_t	,mbstate_t * ps)->size_t
		
mbtowc		mbrtoc16	mbrtoc32	mbrtowc		(WC* pwc,  const MB* pmb, size_t max)->int	
wctomb		c16rtomb	c32rtomb	wcrtomb		(MB* pmb,        WC wc              )->int	
mbstowcs					mbsrtowcs	(WC* dest, const MB* src, size_t max)->size_t	
wcstombs					wcsrtombs	(MB* dest, const WC* src, size_t max)->size_t	
--- строки ---
<string.h>		<stdlib.h>	<wchar.h>			<string.h>	<wchar.h>
memset					wmemset
	strlen		mblen		mbrlen	wcslen
	strstr					wcsstr
memcpy	strcpy	strcat			wmemcpy	wcscpy
	strncpy	strncat				wcsncpy			strxfrm		wcsxfrm		( char * destination, const char * source, size_t num )->size_t
memmove					wmemmove
memcmp	strcmp				wmemcmp	wcscmp
	strncmp					wcsncmp			strcoll		wcscoll		( const char * str1, const char * str2 )->int
memchr	strchr	strrchr			wmemchr	wcschr	wcsrchr
	strspn	strcpn				wcsspn	wcscspn
	strpbrk					wcspbrk
	strtok					wcstok
	strcat					wcscat
	strncat					wcsncat
--- чтение-запись файлами ---
<stdio.h>			<wchar.h>
				fwide
(f||sn|s|vf|v|vs|vsn)printf	(f||s|vf|v|vs)wprintf
(f||   s|vf|v|vs|v)scanf	(f||s|vf|v|vs)wprintf
(f)get(c|s|char)		(f)getw(c|s|char)
(f)put(c|s|char)		(f)putw(c|s|char)
ungetc				ungetwc
fgetpos	ftell
fsetpos	fseek	rewind
<inttypes.h>
PRIxMAX		SCNxMAX		printf/scanf specifier for intmax_t	"%i"
PRIxN		SCNxN		printf/scanf specifier for intN_t	"%d"
PRIxLEASTN	SCNxLEASTN	printf/scanf specifier for int_leastN_t	"%u"
PRIxFASTN	SCNxFASTN	printf/scanf specifier for int_fastN_t	"%x"
PRIxPTR		SCNxPTR		printf/scanf specifier for intptr_t	"%u"
